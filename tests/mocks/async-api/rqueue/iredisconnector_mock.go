// Code generated by MockGen. DO NOT EDIT.
// Source: pthd-notifications/pkg/async-api/rqueue (interfaces: IRedisConnector)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockIRedisConnector is a mock of IRedisConnector interface.
type MockIRedisConnector struct {
	ctrl     *gomock.Controller
	recorder *MockIRedisConnectorMockRecorder
}

// MockIRedisConnectorMockRecorder is the mock recorder for MockIRedisConnector.
type MockIRedisConnectorMockRecorder struct {
	mock *MockIRedisConnector
}

// NewMockIRedisConnector creates a new mock instance.
func NewMockIRedisConnector(ctrl *gomock.Controller) *MockIRedisConnector {
	mock := &MockIRedisConnector{ctrl: ctrl}
	mock.recorder = &MockIRedisConnectorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIRedisConnector) EXPECT() *MockIRedisConnectorMockRecorder {
	return m.recorder
}

// ReadFromQueue mocks base method.
func (m *MockIRedisConnector) ReadFromQueue(arg0 context.Context) (string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadFromQueue", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ReadFromQueue indicates an expected call of ReadFromQueue.
func (mr *MockIRedisConnectorMockRecorder) ReadFromQueue(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadFromQueue", reflect.TypeOf((*MockIRedisConnector)(nil).ReadFromQueue), arg0)
}
