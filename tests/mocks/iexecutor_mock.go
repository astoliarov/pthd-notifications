// Code generated by MockGen. DO NOT EDIT.
// Source: pthd-notifications/pkg/async-api/rqueue (interfaces: IExecutor)

// Package mocks is a generated GoMock package.
package mocks

import (
	model "pthd-notifications/pkg/domain/model"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockIExecutor is a mock of IExecutor interface.
type MockIExecutor struct {
	ctrl     *gomock.Controller
	recorder *MockIExecutorMockRecorder
}

// MockIExecutorMockRecorder is the mock recorder for MockIExecutor.
type MockIExecutorMockRecorder struct {
	mock *MockIExecutor
}

// NewMockIExecutor creates a new mock instance.
func NewMockIExecutor(ctrl *gomock.Controller) *MockIExecutor {
	mock := &MockIExecutor{ctrl: ctrl}
	mock.recorder = &MockIExecutorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIExecutor) EXPECT() *MockIExecutorMockRecorder {
	return m.recorder
}

// SendNotification mocks base method.
func (m *MockIExecutor) SendNotification(arg0 model.INotificationContext) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendNotification", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendNotification indicates an expected call of SendNotification.
func (mr *MockIExecutorMockRecorder) SendNotification(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendNotification", reflect.TypeOf((*MockIExecutor)(nil).SendNotification), arg0)
}
